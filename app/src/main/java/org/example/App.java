/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import com.dashjoin.jsonata.Jsonata;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

public class App {

    private static final Map<String, Jsonata> parseTreeCache = new HashMap<>();
    private static final ObjectMapper objectMapper = new ObjectMapper();

    private static void executeExpression(String expression, Object node, int iterations) {
        Jsonata expr = parseTreeCache.computeIfAbsent(expression, s -> {
            var jsonata = Jsonata.jsonata(s);
            jsonata.setValidateInput(false);
            return jsonata;
        });
        long start = System.nanoTime();
        for (int i = 0; i < iterations; i++) {
            expr.evaluate(node);
        }
        System.out.println("Duration in ms: " + ((double) (System.nanoTime() - start) / 1000000));
    }

    private static Object readJsonAsObject(String path) throws IOException {
        InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(path);
        return objectMapper.readValue(inputStream, Object.class);
    }

    private static String readAsString(String path) throws IOException, URISyntaxException {
        var resource = Thread.currentThread().getContextClassLoader().getResource(path);
        assert resource != null;
        return Files.readString(Path.of(resource.toURI()));
    }

    public static void executeUseCase(int iterations, String expressionPath, String inputPath) throws IOException, URISyntaxException {
        Object input = readJsonAsObject(inputPath);
        String expression = readAsString(expressionPath);

        executeExpression(expression, input, iterations);
    }

    public static void executeUseCases(int iterations) throws IOException, URISyntaxException {
        executeUseCase(iterations, "expressions/expression1.jsonata", "inputs/input1.json");
        executeUseCase(iterations, "expressions/expression2.jsonata", "inputs/input2.json");
    }

    public static void main(String[] args) throws IOException, URISyntaxException {
        int iterations = args.length > 0 ? Integer.parseInt(args[0]) : 1;
        executeUseCases(iterations);
    }
}